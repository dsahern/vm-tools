#!/bin/bash

# Configure dnsmasq for use on host-only bridge

VMTOOLSCONF=${VMTOOLSCONF:=/etc}
. ${VMTOOLSCONF}/vm-tools.conf

DNSMASQ_D=/etc/dnsmasq.d

function usage 
{
    cat <<USE

usage ${0##*/} [-i|-a|-d] name

    -i    initialize dnsmasq config file

    -a    add entry for VM

    -d    delete entry for VM

    -s    show IP address for entry

where 'name' is the name of the profile for this VM.
USE
    exit 1
}


################################################################################
#
# create base dnsmasq config file
# - only needs to be run once at install time

function init
{
    rpm -q dnsmasq >/dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo "dnsmasq rpm is not installed. Please install and run this script again"
        return 1
    fi


    # save original if we did not create it
    head -1 /etc/dnsmasq.conf | egrep -q 'vm-tools' 2>/dev/null
    if [ $? -ne 0 ]
    then
        mv /etc/dnsmasq.conf /etc/dnsmasq.conf.orig
    fi

    # create network name based on hostname
    local local_domain=$(hostname)
    local_domain=${local_domain//.*}.net

    cat > /etc/dnsmasq.conf <<EOF
# Generated by configure-dnsmasq.sh from vm-tools

interface=${HOSTBR}
domain=${local_domain}
#dhcp-option=option:domain-search,mydomain.com

dhcp-range=${HOSTBR_DHCP_START},${HOSTBR_DHCP_END},${HOSTBR_MASK},24h

conf-dir=${DNSMASQ_D}
EOF

    chkconfig dnsmasq on
    service dnsmasq restart
}


################################################################################
#
# add an entry

function add
{
    local name=${1}
	local br
	local mac
	local file

    if [ ! -e ${VM_DIR}/${name}.dat ]
    then
        echo "profile does not exist" >&2
        return 1
    fi

    # load VM's config file
    . ${VM_DIR}/${name}.dat
	OIFS=$IFS
	local n
	for n in $VMNICS
	do
		IFS=,
		set -- $n
		IFS=$OIFS
		br=$1

		if [ "$br" = "$HOSTBR" -o "$br" = "host" ]
		then
			mac=$2 
			break
		fi
	done

    file=${DNSMASQ_D}/${name}
    if [ -e "$file" ]
    then
        echo "entry for host ${name} already exists" >&2
        return 1
    fi

    if [ -z "${mac}" -o "${mac}" = "no" ]
    then
        echo "VM not connected to host-only bridge; not creating dnsmasq entry"
        return 0
    fi

    grep -q "=${mac}," ${DNSMASQ_D}/* 2>/dev/null
    if [ $? -eq 0 ]
    then
        echo "entry already exists with that mac address" >&2
        return 1
    fi

    # make IP based on that
    local ip="${HOSTBR_PREFIX}.$((${HOSTBR_FIXED_BASE} + 10#${VMID}))"
    grep -q ",${ip}," ${DNSMASQ_D}/* 2>/dev/null
    if [ $? -eq 0 ]
    then
        echo "entry already exists with computed IP address" >&2
        return 1
    fi

    echo "dhcp-host=${mac},${ip},${name//./-}" > ${file}

    service dnsmasq restart >/dev/null 2>&1

    echo
    echo "Network data for this VM on the host-only bridge:"
    printf "IP: %-15s    MASK: %-15s\n" ${ip} ${HOSTBR_MASK}
    printf "GW: %-15s    DNS:  %-15s\n" ${HOSTBR_IP} ${HOSTBR_IP}
}


################################################################################
#
# delete an entry

function delete
{
    local name=${1}

    file=${DNSMASQ_D}/${name}
    if [ ! -e "$file" ]
    then
        echo "no entry found for host ${name}" >&2
        return 1
    fi

    rm -f $file

    service dnsmasq restart >/dev/null 2>&1
}


################################################################################
#
# dump current list of MAC-IP-hostnames

function status
{
    local name=${1}
    if [ -n "$name" ]
    then
        local file="${DNSMASQ_D}/${name}"
        if [ ! -f ${file} ]
        then
            echo "entry ${name} does not exist" >&2
            return 1
        fi

        local ip=$(awk -F ',' '{print $2}' ${file})
        if [ -z ${ip} ]
        then
            echo "no IP address found for ${name}" >&2
            return 1
        fi
        echo $ip

    else
        local f
        local FILES=$(ls -C1 ${DNSMASQ_D})
        if [ -z "${FILES}" ]
        then
            echo "no entries found"
            return 1
        fi

        OIFS=$IFS
        printf "%-20s  %17s  %15s\n" "VM" "MAC address" "IP address"
        for f in ${FILES}
        do
            e=$(cat ${DNSMASQ_D}/${f})
            e=${e/dhcp-host=}
            IFS=","
            set -- $e
            IFS=$OIFS
            printf "%-20s  %17s  %15s\n" $3 $1 $2
        done
    fi

    return 0
}


################################################################################
#
# main

ACTION=
MAC=
NAME=


while getopts :iads o
do
    case $o in
        i) [ -n "$ACTION" ] && usage; ACTION=init;;
        a) [ -n "$ACTION" ] && usage; ACTION=add;;
        d) [ -n "$ACTION" ] && usage; ACTION=delete;;
        s) [ -n "$ACTION" ] && usage; ACTION=status;;
        *) usage;;
    esac
done
shift $((${OPTIND}-1))
[ -z "$ACTION" ] && usage
if [ -z "$1" ]
then
    if [ "$ACTION" != "init" -a "$ACTION" != "status" ]
    then
        usage
    fi
fi
NAME=${1//.dat}

case "$ACTION" in
    init)   init;;
    add)    add $NAME ;;
    delete) delete $NAME ;;
    status) status "$NAME";;
esac

exit $?
